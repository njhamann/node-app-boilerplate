//includes
var _ = require('lodash');
var models = require('./../../models');
var err = require('./../../lib/error-handling');

var model = models.Account;
var apiNamspace = 'account';
var basePath = '/' + apiNamspace;

//routes
var routes = function(router){
  //default routes
  router.get(basePath, ensureAuthenticated, list);
  router.get(basePath + '/:id', ensureAuthenticated, read);
  router.post(basePath, ensureAuthenticated, create);
  router.post(basePath + '/:id/update', ensureAuthenticated, update);
  router.post(basePath + '/:id/delete', ensureAuthenticated, remove);
};

//default route methods
var read = function(req, res){
  req.checkParams('id', 'id is required').notEmpty();
  var errors = req.validationErrors();
  if(errors){
    res.json({ 
      success: false,
      errors: errors
    });
  }else{
    model.find(req.params.id)
    .success(function(model){
      var json = {};
      json.success = true;
      json[apiNamspace] = model;
      res.json(json);
    })
    .error(err.model(res));
  }
};

var list = function(req, res){
  var errors = req.validationErrors();
  if(errors){
    res.json({ 
      success: false,
      errors: errors
    });
  }else{
    model.find({
      where: { }
    })
    .success(function(model){
      var json = {};
      json.success = true;
      json[apiNamspace] = model;
      res.json(json);
    })
    .error(err.model(res));
  }
};

var create = function(req, res){
  var data = {};
  for(var key in model.tableAttributes){
    var column = model.tableAttributes[key];
    if(!column._autoGenerated){
      if(typeof column.allowNull != 'undefined' 
        && !column.allowNull){
        req.checkBody(column.fieldName, column.fieldName + ' is required').notEmpty();
      }
      data[column.fieldName] = req.body[column.fieldName];
    }
  }

  var errors = req.validationErrors();
  if(errors){
    res.json({ 
      success: false,
      errors: errors
    });
  }else{
    model.create(data)
    .success(function(model){
      var json = {};
      json.success = true;
      json[apiNamspace] = model;
      res.json(json);
    })
    .error(err.model(res));
  }
};

var update = function(req, res){
  var data = {};
  for(var key in model.tableAttributes){
    var column = model.tableAttributes[key];
    if(!column._autoGenerated){
      data[column.fieldName] = req.body[column.fieldName];
    }
  }
  
  req.checkParams('id', 'id is required').notEmpty();
  
  var errors = req.validationErrors();
  
  if(errors){
    res.json({ 
      success: false,
      errors: errors
    });
  }else{
    model.find(req.params.id)
    .then(function(model){
      _.extend(model, data)
      return model.save();
    })
    .then(function(model){
      var json = {};
      json.success = true;
      json[apiNamspace] = model;
      res.json(json);
    });
  }
};

var remove = function(req, res){
  req.checkParams('id', 'id is required').notEmpty();
  if(errors){
    req.flash('errors', errors);   
  }else{
    model.find(req.params.id).then(function(user) {
      return user.destroy();
    }).then(function(model){
      var json = {};
      json.success = true;
      json[apiNamspace] = model;
      res.json(json);
    });
  }
};

//private methods
function ensureAuthenticated(req, res, next) {
  if (req.isAuthenticated()) { 
    return next();
  }
  res.redirect('/log_in');
}

//export
module.exports = routes;
